package dct

import (
	"fmt"
	"math"
	"math/rand"
	"testing"
	"time"
)

func TestDct(t *testing.T) {
	// see if we match python's scipy.fftpack.dct

	singleRowData := [][]float64{
		{1.5, 2.5, 3.3, 4.1},
	}
	expectedSingleRowAxis1 := [][]float64{
		{22.8, -5.41646706, -0.28284271, -0.5117466},
	}
	ourSingleRowAxis1 := Dct2(singleRowData, 1)
	if !checkDelta(expectedSingleRowAxis1, ourSingleRowAxis1) {
		t.Errorf("Outputs are not equal when axis=1!; want\n%v\ngot\n%v", expectedSingleRowAxis1, ourSingleRowAxis1)
	}
	expectedSingleRowAxis0 := [][]float64{
		{3, 5, 6.6, 8.2},
	}
	ourSingleRowAxis0 := Dct2(singleRowData, 0)
	if !checkDelta(expectedSingleRowAxis0, ourSingleRowAxis0) {
		t.Errorf("Outputs are not equal when axis=0!; want\n%v\ngot\n%v", expectedSingleRowAxis0, ourSingleRowAxis0)
	}

	data := [][]float64{

		{0.8160599232925247, 0.9748617929054211, 0.3150309664690698, 0.07860942529857207, 0.3234509518829781, 0.37270742007044677, 0.1962563356108582, 0.6662269713780992},
		{0.8539124529858432, 0.9825979643823058, 0.8898264767097817, 0.6564786632042391, 0.9215601807992911, 0.39155919427480534, 0.056664430060196835, 0.23211252779698288},
		{0.8990937723898191, 0.5387447535815097, 0.6588166897581768, 0.9452847853879763, 0.739154980556069, 0.9981900441601934, 0.512739393769996, 0.6500011830364495},
		{0.6906979798394355, 0.1469132688359428, 0.5267230583956898, 0.20429796452772275, 0.05225821563844657, 0.8588929218998477, 0.12011242972862446, 0.4425452936059423},
		{0.3905549539712313, 0.9325131993517776, 0.22903692235047046, 0.6561161459406119, 0.8214487131406967, 0.7698419638539222, 0.0815001505775158, 0.845686418702554},
		{0.518158781015229, 0.12370394404133678, 0.7979000399939334, 0.3660773140917696, 0.6595802914138068, 0.2777628478794588, 0.3091268242822963, 0.22082470809448274},
		{0.15600798002194927, 0.9613555484155563, 0.14296674278655896, 0.5863871917804402, 0.011156982368314416, 0.18765882649318943, 0.26909135120419614, 0.6103898230682632},
		{0.12685103340519477, 0.3691718264006608, 0.13396328688137726, 0.5321875084816547, 0.40974328124510917, 0.001696543131544881, 0.3514654708607534, 0.2386430232365161},
	}

	expectedAxis0 := [][]float64{
		{8.902673753842453, 10.059724595829021, 7.388528366690116, 8.050877997425975, 7.876707194089423, 7.716619523526817, 3.7939127721888743, 7.81285989783858},
		{3.0528868747497384, 1.3780712057054667, 1.5587696062941476, -0.3058774072777447, 1.13297210945617, 1.9020797042225333, -0.4163988007081364, 0.5292614174177872},
		{-0.5673811501759372, 1.4697515846758806, -0.8912861615635432, -0.5136571569057735, -0.616308425981478, -2.8509591166565498, 0.2598199705709233, -0.7300379882627006},
		{-0.2069282460969455, 1.0577172630942484, -0.04825497190722272, -1.4157439810413344, 0.19986671468913664, -0.9747063392556268, -0.6175225740903625, 0.4647290768504404},
		{-0.5699409291877983, -0.2587192313725566, -1.8169189567040813, -1.531617202706679, -1.0246702372369147, 0.20925826209701973, -0.5632637433777601, 0.6785021409664013},
		{0.044572089663504524, -0.5131259150791732, -0.8230601201522627, -1.1668289617243337, -3.129771557601094, 0.44146331847587916, 0.38788680101126727, 0.7141805970563251},
		{0.646769252655385, -2.165390593473067, 0.5485201859677582, -0.0644841592188144, 0.7535454236788361, 0.32737484878197254, 1.1815930901116047, -0.24107727764948847},
		{-0.4618339172039849, 2.4439225315052777, -1.5744364884054702, 1.5946012078609204, 0.5958938765791765, 0.9415462186775687, 0.4383311661629925, 2.0916383477221663},
	}

	expectedAxis1 := [][]float64{
		{7.48640757381594, 1.4290623968781127, 2.36596117755904, 0.33055607549357224, 0.03604937397659226, -1.7904649016751226, -0.0663997171968227, -0.4223166194226856},
		{9.969423780426892, 3.209690884724189, -1.0944362089280457, -0.010109488938339628, 0.4856632244185296, -1.3717771076982102, 0.07081437118659006, 0.562336385848262},
		{11.884051205280379, 0.23519441590317014, -0.7135315241419744, 0.8407446630662574, 0.7425241195104898, 0.43612993141877476, 1.0152714151213487, -0.9003999203668914},
		{6.084882264943303, 0.22157276070648413, 0.7637745869488667, 0.8848427749648398, -0.3717150397108341, 0.34638736528946446, 2.737872585047077, -0.7835701126694226},
		{9.453396935777558, -0.14300943645833375, -0.43432424256185276, 0.15563016981476685, 0.9912420786649111, -2.6609868016597984, -0.21266584271942257, -1.6981929434667205},
		{6.546269501624627, 0.7383210848075766, -1.0217071011654504, -0.12736585712455242, 0.3622471813782346, 0.40896983461226244, 0.9683880065205447, 1.7627282043972898},
		{5.850028892276936, 0.43467575150507787, 1.000694253958205, -1.5772123673244647, -0.27878461486360295, -0.9236722299869282, -1.5334180474551775, -2.1491686263625125},
		{4.327443947285622, 0.004899015697884625, -0.6173938289241246, -0.5883152485240115, 0.6379909387053704, 0.09627636211159055, -1.522082993058961, -0.08352475393201897},
	}

	oursAxis0 := Dct2(data, 0)

	if !checkDelta(expectedAxis0, oursAxis0) {
		t.Errorf("Outputs are not equal when axis=0!; want\n%v\ngot\n%v", printSlice(expectedAxis0), printSlice(oursAxis0))
	}

	oursAxis1 := Dct2(data, 1)

	if !checkDelta(expectedAxis1, oursAxis1) {
		t.Errorf("Outputs are not equal when axis=1!;\n\nwant\n\n%v\n\ngot\n%v", printSlice(expectedAxis1), printSlice(oursAxis1))
	}
}

func TestDct2Loop(t *testing.T) {
	dim := 16
	data := make([][]float64, dim)
	for i, _ := range data {
		row := make([]float64, dim)
		for j := range row {
			row[j] = rand.Float64()
		}
		data[i] = row
	}
	start := time.Now().UnixNano()
	for i := 0; i < 100000; i++ {
		Dct2(data, 0)
	}
	end := time.Now().UnixNano()
	Dct2(data, 0)
	fmt.Println("Took", (end-start)/10e9, "seconds")
}

func checkDelta(expected [][]float64, observed [][]float64) bool {
	eps := 0.001
	if len(expected) != len(observed) {
		return false
	}
	for i := 0; i < len(expected); i++ {
		if len(expected[i]) != len(observed[i]) {
			return false
		}
		for j := 0; j < len(expected[i]); j++ {
			if math.Abs(expected[i][j]-observed[i][j]) > eps {
				return false
			}
		}
	}
	return true
}
func printSlice(vals [][]float64) string {
	out := ""
	for _, row := range vals {
		for _, v := range row {
			out += fmt.Sprintf("%.3f ", v)
		}
		out += "\n"
	}
	return out
}
